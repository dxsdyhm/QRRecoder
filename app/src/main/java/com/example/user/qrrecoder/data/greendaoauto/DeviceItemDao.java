package com.example.user.qrrecoder.data.greendaoauto;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.user.qrrecoder.data.greendao.DeviceItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_ITEM".
*/
public class DeviceItemDao extends AbstractDao<DeviceItem, Long> {

    public static final String TABLENAME = "DEVICE_ITEM";

    /**
     * Properties of entity DeviceItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Deviceid = new Property(1, int.class, "deviceid", false, "DEVICEID");
        public final static Property Userid = new Property(2, int.class, "userid", false, "USERID");
        public final static Property Deviceuuid = new Property(3, String.class, "deviceuuid", false, "DEVICEUUID");
        public final static Property Scantime = new Property(4, long.class, "scantime", false, "SCANTIME");
        public final static Property ServerState = new Property(5, int.class, "serverState", false, "SERVER_STATE");
        public final static Property Faccount = new Property(6, String.class, "faccount", false, "FACCOUNT");
    }


    public DeviceItemDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEVICEID\" INTEGER NOT NULL ," + // 1: deviceid
                "\"USERID\" INTEGER NOT NULL ," + // 2: userid
                "\"DEVICEUUID\" TEXT NOT NULL ," + // 3: deviceuuid
                "\"SCANTIME\" INTEGER NOT NULL ," + // 4: scantime
                "\"SERVER_STATE\" INTEGER NOT NULL ," + // 5: serverState
                "\"FACCOUNT\" TEXT);"); // 6: faccount
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DEVICE_ITEM_DEVICEID ON \"DEVICE_ITEM\"" +
                " (\"DEVICEID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DEVICE_ITEM_USERID ON \"DEVICE_ITEM\"" +
                " (\"USERID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDeviceid());
        stmt.bindLong(3, entity.getUserid());
        stmt.bindString(4, entity.getDeviceuuid());
        stmt.bindLong(5, entity.getScantime());
        stmt.bindLong(6, entity.getServerState());
 
        String faccount = entity.getFaccount();
        if (faccount != null) {
            stmt.bindString(7, faccount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDeviceid());
        stmt.bindLong(3, entity.getUserid());
        stmt.bindString(4, entity.getDeviceuuid());
        stmt.bindLong(5, entity.getScantime());
        stmt.bindLong(6, entity.getServerState());
 
        String faccount = entity.getFaccount();
        if (faccount != null) {
            stmt.bindString(7, faccount);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceItem readEntity(Cursor cursor, int offset) {
        DeviceItem entity = new DeviceItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // deviceid
            cursor.getInt(offset + 2), // userid
            cursor.getString(offset + 3), // deviceuuid
            cursor.getLong(offset + 4), // scantime
            cursor.getInt(offset + 5), // serverState
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // faccount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceid(cursor.getInt(offset + 1));
        entity.setUserid(cursor.getInt(offset + 2));
        entity.setDeviceuuid(cursor.getString(offset + 3));
        entity.setScantime(cursor.getLong(offset + 4));
        entity.setServerState(cursor.getInt(offset + 5));
        entity.setFaccount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
