package com.example.user.qrrecoder.data.greendaoauto;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.user.qrrecoder.data.greendao.DeviceItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_ITEM".
*/
public class DeviceItemDao extends AbstractDao<DeviceItem, Void> {

    public static final String TABLENAME = "DEVICE_ITEM";

    /**
     * Properties of entity DeviceItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Fdeviceid = new Property(0, int.class, "fdeviceid", false, "FDEVICEID");
        public final static Property Fid = new Property(1, int.class, "fid", false, "FID");
        public final static Property Fdeviceuuid = new Property(2, String.class, "fdeviceuuid", false, "FDEVICEUUID");
        public final static Property Fscantime = new Property(3, long.class, "fscantime", false, "FSCANTIME");
        public final static Property ServerState = new Property(4, int.class, "serverState", false, "SERVER_STATE");
        public final static Property Faccount = new Property(5, String.class, "faccount", false, "FACCOUNT");
        public final static Property Fcreate = new Property(6, String.class, "fcreate", false, "FCREATE");
        public final static Property Ftime = new Property(7, long.class, "ftime", false, "FTIME");
        public final static Property Fstatus = new Property(8, String.class, "fstatus", false, "FSTATUS");
        public final static Property Fdes = new Property(9, String.class, "fdes", false, "FDES");
    }


    public DeviceItemDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_ITEM\" (" + //
                "\"FDEVICEID\" INTEGER NOT NULL ," + // 0: fdeviceid
                "\"FID\" INTEGER NOT NULL ," + // 1: fid
                "\"FDEVICEUUID\" TEXT NOT NULL ," + // 2: fdeviceuuid
                "\"FSCANTIME\" INTEGER NOT NULL ," + // 3: fscantime
                "\"SERVER_STATE\" INTEGER NOT NULL ," + // 4: serverState
                "\"FACCOUNT\" TEXT," + // 5: faccount
                "\"FCREATE\" TEXT," + // 6: fcreate
                "\"FTIME\" INTEGER NOT NULL ," + // 7: ftime
                "\"FSTATUS\" TEXT," + // 8: fstatus
                "\"FDES\" TEXT);"); // 9: fdes
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DEVICE_ITEM_FDEVICEID ON \"DEVICE_ITEM\"" +
                " (\"FDEVICEID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_DEVICE_ITEM_FID ON \"DEVICE_ITEM\"" +
                " (\"FID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFdeviceid());
        stmt.bindLong(2, entity.getFid());
        stmt.bindString(3, entity.getFdeviceuuid());
        stmt.bindLong(4, entity.getFscantime());
        stmt.bindLong(5, entity.getServerState());
 
        String faccount = entity.getFaccount();
        if (faccount != null) {
            stmt.bindString(6, faccount);
        }
 
        String fcreate = entity.getFcreate();
        if (fcreate != null) {
            stmt.bindString(7, fcreate);
        }
        stmt.bindLong(8, entity.getFtime());
 
        String fstatus = entity.getFstatus();
        if (fstatus != null) {
            stmt.bindString(9, fstatus);
        }
 
        String fdes = entity.getFdes();
        if (fdes != null) {
            stmt.bindString(10, fdes);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFdeviceid());
        stmt.bindLong(2, entity.getFid());
        stmt.bindString(3, entity.getFdeviceuuid());
        stmt.bindLong(4, entity.getFscantime());
        stmt.bindLong(5, entity.getServerState());
 
        String faccount = entity.getFaccount();
        if (faccount != null) {
            stmt.bindString(6, faccount);
        }
 
        String fcreate = entity.getFcreate();
        if (fcreate != null) {
            stmt.bindString(7, fcreate);
        }
        stmt.bindLong(8, entity.getFtime());
 
        String fstatus = entity.getFstatus();
        if (fstatus != null) {
            stmt.bindString(9, fstatus);
        }
 
        String fdes = entity.getFdes();
        if (fdes != null) {
            stmt.bindString(10, fdes);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public DeviceItem readEntity(Cursor cursor, int offset) {
        DeviceItem entity = new DeviceItem( //
            cursor.getInt(offset + 0), // fdeviceid
            cursor.getInt(offset + 1), // fid
            cursor.getString(offset + 2), // fdeviceuuid
            cursor.getLong(offset + 3), // fscantime
            cursor.getInt(offset + 4), // serverState
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // faccount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fcreate
            cursor.getLong(offset + 7), // ftime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fstatus
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // fdes
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceItem entity, int offset) {
        entity.setFdeviceid(cursor.getInt(offset + 0));
        entity.setFid(cursor.getInt(offset + 1));
        entity.setFdeviceuuid(cursor.getString(offset + 2));
        entity.setFscantime(cursor.getLong(offset + 3));
        entity.setServerState(cursor.getInt(offset + 4));
        entity.setFaccount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFcreate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFtime(cursor.getLong(offset + 7));
        entity.setFstatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFdes(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(DeviceItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(DeviceItem entity) {
        return null;
    }

    @Override
    public boolean hasKey(DeviceItem entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
